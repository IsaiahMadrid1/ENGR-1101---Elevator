Elevator Code - Week Four

#include <Servo.h>
#include <Adafruit_NeoPixel.h>
#include <AccelStepper.h>
AccelStepper Lift(4, A3, A1, A2, A0); //Pins IN1-IN3-IN2-IN4
Adafruit_NeoPixel Flights = Adafruit_NeoPixel(60, A5, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel Elights = Adafruit_NeoPixel(4, A4, NEO_GRB + NEO_KHZ800);
Servo Door;
int i, j, Floor = 0, ans = 1, Tcall = 0;
int FpbUp[] = {6, 8, 10};
int FpbDown[] = {7, 9, 11};
int Epb[] = {2, 3, 4, 5};
int Ecall[] = {0, 0, 0, 0};
int FcallUp[] = {0, 0, 0};
int FcallDown[] = {0, 0, 0};
int FlightsUp[] = {7, 24, 39};
int FlightsDown[] = {23, 38, 53};
int Elight[] = {0, 1, 2, 3};
unsigned long time;

void setup() {
  Elights.begin();
  Elights.clear();
  Elights.show();
  Flights.begin();
  Flights.clear();
  Flights.show();
  Lift.setMaxSpeed(1000.0);
  Lift.setAcceleration(50.0);
  Lift.setSpeed(200);
  delay(100);
  Door.attach(12);
  Door.write(90);
  delay(100);
  for (i = 0; i < 10; i = i + 1) {
    pinMode (2 + i, INPUT_PULLUP);
  } //close for

  //Begin Lift Calibration (Lines 33-48)

  Serial.begin(9600);
  Serial.println("Move lift to ground floor to calibrate.");
  Serial.println("Type: 1 (down), -1(up), or 0(Finished");
  while (ans != 0) {
    if (Serial.available() > 0) {
      ans = Serial.parseInt();
      Serial.parseInt();
      Lift.setCurrentPosition(0);
      Lift.moveTo(ans * 1000);
      while (Lift.distanceToGo() != 0) {
        Lift.run();
      }// close while
      Serial.println("Type: 1(down),-1(up),or 0(Finished)");
    }// close if
  }//close while
  Serial.println("Calibration complete.");

} // close setup

void loop() {
  getFlist();
  for (i = 0; i < 3; i++) {
    if (FcallUp[i] == 1 || Ecall[i] == 1) {
      getFlistLift((Floor - i) * 1000);
      Floor = i;
      delay(100);
      FcallUp[i] = 0;
      Ecall[i] = 0;
      Flights.setPixelColor(FlightsUp[i], 0, 0, 0);
      Flights.show();
      delay(100);
      Elights.setPixelColor(Elight[i], 0, 0, 0);
      Elights.show();
      delay(100);
      Door.write(0);
      getFlistDoor(5000);
      delay(100);
      getFlist();
      Door.write(90);
      delay(100);
    } // close if
  } //close for
  for (i = 3; i > 0; i--) {
    if (FcallDown[i - 1] == 1 || Ecall[i] == 1) {
      getFlistLift((Floor - i) * 1000);
      Floor = i;
      delay(100);
      FcallDown[i - 1] = 0;
      Ecall[i] = 0;
      Flights.setPixelColor(FlightsDown[i], 0, 0, 0);
      Flights.show();
      delay(100);
      Elights.setPixelColor(Elight[i], 0, 0, 0);
      Elights.show();
      delay(100);
      Door.write(0);
      getFlistDoor(5000);
      delay(100);
      getFlist();
      Door.write(90);
      delay(100);
    }//close if
  }//close for
} // close loop

void getFlist() {
  Tcall = 0;
  while (Tcall == 0) {
    Listen();
    Tcall = Ecall[0];
    for (i = 0; i < 3; i++) {
      Tcall = Tcall + Ecall[i + 1] + FcallUp[i] + FcallDown[i];
    }
  }
}
  void getFlistLift(int target) {
    Lift.setCurrentPosition(0);
    Lift.moveTo(target);
    while (Lift.distanceToGo() != 0) {
      Listen();
      Lift.run();
    }
  }

  void getFlistDoor(int otime) {
    time = millis();
    while ((millis() - time) < otime) {
      Listen();
    }
  }

  void Listen() {
    for (j = 0; j < 4; j++) {
      if (digitalRead(Epb[j]) == LOW) {
        Ecall[j] = 1;
        Elights.setPixelColor(Elight[j], 0, 25, 0);
        Elights.show();
        Serial.print("Pressed E Button");
        Serial.println(j);
      }
    }
    for (j = 0; j < 3; j++) {
      if (digitalRead(FpbUp[j]) == LOW) {
        FcallUp[j] = 1;
        Flights.setPixelColor(FlightsUp[j], 0, 25, 0);
        Flights.show();
        Serial.println("Pressed FUp Button");
        Serial.println(j);
      }
      if (digitalRead(FpbDown[j]) == LOW) {
        FcallDown[j] = 1;
        Flights.setPixelColor(FlightsDown[j], 0, 25, 0);
        Flights.show();
        Serial.print("Pressed FDn Button");
        Serial.println(j);
      }
    }
  }
